{
    "noir_version": "1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a",
    "hash": 8512731762724819413,
    "abi": {
        "parameters": [
            {
                "name": "nullifier_hash",
                "type": {
                    "kind": "field"
                },
                "visibility": "public"
            },
            {
                "name": "secret_answer_one",
                "type": {
                    "kind": "field"
                },
                "visibility": "private"
            },
            {
                "name": "secret_answer_two",
                "type": {
                    "kind": "field"
                },
                "visibility": "private"
            },
            {
                "name": "secret_key",
                "type": {
                    "kind": "field"
                },
                "visibility": "private"
            },
            {
                "name": "recipient",
                "type": {
                    "kind": "field"
                },
                "visibility": "public"
            },
            {
                "name": "guardians",
                "type": {
                    "kind": "array",
                    "length": 5,
                    "type": {
                        "kind": "field"
                    }
                },
                "visibility": "private"
            }
        ],
        "return_type": null,
        "error_types": {}
    },
    "bytecode": "H4sIAAAAAAAA/9VZa0/bQBDcxKVJIG1pcdoS+gD6gEIfd34kNs0H/kqjhv//CxB7yp20OJYgeFayVxrdyU4mc3P2jiP3aF0LxjfarJ4fr/2YmlmWrebJyqb2n0nKZZGbLF/OClvYvMj/J0WaroqsmJfLcm5Km6Ure5OX6Y1Z167gMg1LU+fe03Um1QNO2xvGM6E1Ytz6eU/Md8V8z8/D98aMF4yXjFf++EPc/Udy7zNee64DcTxUH+wvEew6sPs4rtq92hG+jR/pZ8yYMN4y3tX4GYH9HAP9jIG63gP3Ru5Jtar3v2lWFqlb6j3UFHyowDsl7E2vse6pMBjEW9sIntP2jeCI8YHxkfGJutUIjoC6PlM3GwFSt9R7rCn4WIH3hNrdCNy6T4TBIN7aRjCg7RvBKeML4yutn7S71AhOgbq+UzcbAVK31HumKfhMgfec2t0I3LrPhcEg3nt/N9F/h5Ce/gB6Wbc/TfW5pzXXqCPwvk+pnWF3QbphNKTtw+iS8ZPxi/GbuhVGl0Bdf6ibYYTULfUaTcFGgddSu8PIrdsKg0G8qmGE9DQh3TAyzcq6sLyo8dA0K+hDUkq6ATKi7QMkY+SMGWNO3QqQDKiroG4GCFK31FtqCi4VeK+o3QHi1n0lDAbxqgYI0tO/1O4AcQGXEj5AkCG8AF83aA/dHi+o3fe20xYa9NCP4QWrCzv3ktC9Hxj48yNxTRBtBqT0cVQZJ+J8BPQj8Mc6/GZQs8aJmMeVdUp/rkEaAl94ANmhzepXzoXPDiv6enh9tqolqvmtUAd+jMWx4OcdNftZQ7khAAA=",
    "debug_symbols": "5ZfdaoQwFITfJdde5JxjEvVVyrK4/iyCqPhTKLLvXndRatvQMpfrXh4zX8jEGcFZ5cVlup6rpmwHlbzNqm6zdKzaZplmpR+Phi5t7tMwpv2oEo5coIomV4lIdAtUWdWFSizdgl9SMbxKQ7Jf0sgjZUd21bIT/beYnJNVTC7mf8Sat1OQtmYvPgWKjm+Rj29RfBbFhdu52Ty9xdBnMZRoO7eL9xYXwPgAE+kVsGyf/k6sz6KVeLPo+MedOBSIUCBGAdLHf09E8K0wTAhMhDDxAp0iuFQEt4rgWhHcK9YwAaeU+fh5YLhXDPeKDUzAKWU4pQynlOPj50HgXgncK4G//gKnVOCUCpxS8abUiVkJF37Lw2kZLn1V19X1vP8PWx6/p32VXupiHcupyXar40e3rWx817dZkU99cd/psbZs/wk=",
    "file_map": {
        "61": {
            "source": "use poseidon::poseidon2::Poseidon2;\n\n\nfn main(\n    // public inputs\n    nullifier_hash: pub Field,\n    // private inputs\n    secret_answer_one: Field,\n    secret_answer_two: Field,\n    secret_key: Field,\n    recipient: pub Field,\n    guardians: [Field; 5],\n) {\n    \n    let commitment = Poseidon2::hash([secret_key, secret_answer_one], 2);\n    let computed_nullifier_hash = Poseidon2::hash([secret_key, secret_answer_two], 2);\n    assert(computed_nullifier_hash == nullifier_hash);\n   \n    let mut is_commited: bool = false; \n    for i in 0..5 {\n        let guardian_commitment = Poseidon2::hash([guardians[i], commitment], 2);\n        if guardian_commitment == commitment {\n            is_commited = true;\n        }\n    }\n\n    assert(is_commited);\n\n    let recipient_binding = recipient * recipient;\n    assert(recipient_binding == recipient * recipient);\n}\n\n\n#[test]\nfn test_main() {\n \n}",
            "path": "/Users/kaleab/Documents/daemon/circuits/src/main.nr"
        },
        "68": {
            "source": "use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
            "path": "/Users/kaleab/nargo/github.com/noir-lang/poseidon/v0.1.1/src/poseidon2.nr"
        }
    },
    "names": [
        "main"
    ],
    "brillig_names": [
        "directive_invert"
    ]
}