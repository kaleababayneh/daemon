{"noir_version":"1.0.0-beta.11+fd3925aaaeb76c76319f44590d135498ef41ea6c","hash":"17436161866887662383","abi":{"parameters":[{"name":"nullifier_hash","type":{"kind":"field"},"visibility":"public"},{"name":"guardians_commitment","type":{"kind":"field"},"visibility":"public"},{"name":"new_owner","type":{"kind":"field"},"visibility":"public"},{"name":"current_owner","type":{"kind":"field"},"visibility":"public"},{"name":"secret_answer","type":{"kind":"field"},"visibility":"private"},{"name":"secret_key","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"H4sIAAAAAAAA/71Ua86CMBAsgo/v8/1+nKJLW2n/eRWJeP8TGJdQk3XVxEBxkkkHEja7M0sjUeGAHIpXRP48+VPJo9ZFlhag4CxTl1sjtcmPFiwYay6pVaqw2mYud5l0oFUBV+PUVVbokVqyIdrss1+/z5S/KHtbIBPSaxd58zohukd03+vHdwPkH/LfZ5WIdrMa1fcAvvHg09xUj5gHY+QEOUXOfuDBvL4H+hsP6B6Mie4QPWcelDWWyBVy/caDmHkgmwHigLUWAbPZhOvrbTYbksGS6BXRa5bNFrlD7kV1p/JsOiybph6EzHkr2rmb+cyyGSAK6N9AhN2hhM1cPnfF8x48/u9YfMYd89vetZgHAAA=","debug_symbols":"pVbbjoMgEP0Xnn1gBrn1Vzabxlq6MSFqqG6yafrvi1ZafYAYeXEq9BzPDIfJPMjVXMafc9Peujs5fT3IxTXWNj9n29XV0HStX308CxJez4Mzxi+R1b5H9ZUz7UBO7WhtQX4rO85/uvdVO8ehcn6XFsS0Vx894a2xZvr1LD5oGoei1guYleIN51s8xPGM44IvYYWXGzwmvo8qCEBGMcbA4gwAIkgAUPyIBgkiaJCMxhh4QoOULGiQOpqFiDPoki8EmqsDeKD4rgIV/EgOmoaTAI3RHBJeKlkwYiniXqKZZoKEG1GoIAGFZlGKhBmAfcrAMHoUwDLPMlkHrd514IfqsM/RILItDTLbk0kV2aZkKqTBMWpKzDUlQnaLQ8zvcfm+xjLT1ymCnYbA/BuOMr8SKrcS+wjksTrsu+EMsm84w8w6pAh2OiKZRnaL4CwQcEVjLSKBFzy0a7Eu42685MHSUsAG/+3fqrpxm6mRUHLyH4T5ifOT+dx9KF+BT3ejIOIV5DTaFUS9gvbBLwKdOuNz0uSa6mLNMo7exrZeTafDXx92wvzau64219GZSdO851X+Aw==","file_map":{"50":{"source":"use poseidon::poseidon2::Poseidon2;\n\n\nfn main(\n    // public inputs\n    nullifier_hash: pub Field,\n    guardians_commitment: pub Field,\n    new_owner: pub Field,       \n    current_owner: pub Field,   \n    // private inputs\n    secret_answer: Field,\n    secret_key: Field,\n) {\n\n    let commitment = Poseidon2::hash([secret_key, secret_answer], 2);\n\n    let computed_nullifier_hash = Poseidon2::hash([\n        secret_key, \n        Poseidon2::hash([ secret_answer], 1),\n        new_owner,     \n        current_owner   \n    ], 4);\n    assert(computed_nullifier_hash == nullifier_hash);\n   \n    let mut is_commited: bool = false; \n\n    //for i in 0..10 {\n    if guardians_commitment == commitment {\n            is_commited = true;\n    }\n    \n\n    assert(is_commited);\n}\n\n\n\n#[test]\nfn test_main() {\n    \n}\n","path":"/Users/kaleab/Documents/smart-account/circuits/src/main.nr"},"57":{"source":"use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"/Users/kaleab/nargo/github.com/noir-lang/poseidon/v0.1.1/src/poseidon2.nr"}},"names":["main"],"brillig_names":[]}