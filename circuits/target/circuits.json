{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":6444847507288432152,"abi":{"parameters":[{"name":"nullifier_hash","type":{"kind":"field"},"visibility":"public"},{"name":"guardians_commitment","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"public"},{"name":"new_owner","type":{"kind":"field"},"visibility":"public"},{"name":"current_owner","type":{"kind":"field"},"visibility":"public"},{"name":"secret_answer_one","type":{"kind":"field"},"visibility":"private"},{"name":"secret_answer_two","type":{"kind":"field"},"visibility":"private"},{"name":"secret_key","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"H4sIAAAAAAAA/9VUWw6CMBDkKW8VUM/R0hbaP68iEe5/AuMSSrKpJETpj5NMOjS02d3ZruvMuAET5xOuXu96ZaTlfOiagTL6II3qpSBc9K2kkgopno1kbJBcdqpXHVGUs4GOQrGRzIjQXeQ7cHNjiq0CBijWA/CldYi0h3Sk9XIu1rmnwAztL/CNGpB9oL7Fu2KL3uT24lr1JkceJEinSGeGNwXwCDwBzyveeIY3e2tg0+fCYj1xzrbfZPkncVa/x9mYG1uzI0C6RLoy+rMGXoBXZ56hW/1J9oG6FutZO3bf+5L7Mi+n71DXNTD6wkP/reENRwTog5gGAAA=","debug_symbols":"3ZXBasQgEIbfxXMOOkZH8yqlLCYxiyAmmKRQwr573SXSFKR7KBQ2x3G+f5hPBDfS23a9XlwYxpk0bxvxY2cWN4ZUbYQ+jubJhHs1LyYupOFCVMSGnjQ16ltFBuctaSS7VQUUMsrkN6oKKIDSOwucwu8w4zTDjIN6AlPIWzAqxRF+rwg7vyL8oyIymRWR0ydbI/K8NWr4iyI/v2JdUqx1TgjOj4opIEoBSdkekAJe/k7k+RXx/IqqpIgq74Iaf7zsVLTRee+ul+NnlY4/THSm9XYvhzV0h+7yOeVOzk9x7Gy/Rnuf9Oil8V8=","file_map":{"61":{"source":"use poseidon::poseidon2::Poseidon2;\n\n\nfn main(\n    // public inputs\n    nullifier_hash: pub Field,\n    guardians_commitment: pub [Field; 1],\n    new_owner: pub Field,       \n    current_owner: pub Field,   \n    // private inputs\n    secret_answer_one: Field,\n    secret_answer_two: Field,\n    secret_key: Field,\n) {\n    \n    let computed_nullifier_hash = Poseidon2::hash([\n        secret_key, \n        secret_answer_two,\n        new_owner,     \n        current_owner   \n    ], 4);\n    assert(computed_nullifier_hash == nullifier_hash);\n   \n    let mut is_commited: bool = false; \n    let commitment = Poseidon2::hash([secret_key, secret_answer_one], 2);\n\n    for i in 0..1 {\n        if guardians_commitment[i] == commitment {\n            is_commited = true;\n        }\n    }\n\n    assert(is_commited);\n\n    // let guardian_binding = guardian * guardian;\n    // assert(guardian_binding == guardian * guardian);\n}\n\n\n\n#[test]\n// fn test_main() {\n//     // Test data setup\n//     let secret_key = 12345;\n//     let secret_answer_one = 67890;\n//     let secret_answer_two = 54321;\n//     let new_owner = 0x1234567890abcdef; // Recovery target\n//     let current_owner = 0xabcdef1234567890; // Current account owner\n    \n//     // Create guardian commitment\n//     let guardian_commitment = Poseidon2::hash([secret_key, secret_answer_one], 2);\n    \n//     // Create nullifier hash with ALL required fields\n//     let nullifier_hash = Poseidon2::hash([\n//         secret_key, \n//         secret_answer_two,\n//         new_owner,\n//         current_owner\n//     ], 4);\n    \n//     // Setup guardians commitment array\n//     let mut guardians_commitment = [0; 10];\n//     guardians_commitment[0] = 11111;\n//     guardians_commitment[1] = 22222;\n//     guardians_commitment[2] = guardian_commitment;\n//     guardians_commitment[3] = 33333;\n//     guardians_commitment[4] = 44444;\n//     guardians_commitment[5] = 55555;\n//     guardians_commitment[6] = 66666;\n//     guardians_commitment[7] = 77777;\n//     guardians_commitment[8] = 88888;\n//     guardians_commitment[9] = 99999;\n\n//     // Call main function with correct signature\n//     main(\n//         nullifier_hash,\n//         guardians_commitment,\n//         new_owner,     \n//         current_owner,  \n//         secret_answer_one,\n//         secret_answer_two,\n//         secret_key\n//     );\n// }\n\n// #[test(should_fail)]\n// fn test_invalid_guardian_should_fail() {\n//     let secret_key = 12345;\n//     let secret_answer_one = 67890;\n//     let secret_answer_two = 54321;\n//     let new_owner = 0x1234567890abcdef;\n//     let current_owner = 0xabcdef1234567890;\n    \n//     let nullifier_hash = Poseidon2::hash([\n//         secret_key, \n//         secret_answer_two,\n//         new_owner,\n//         current_owner\n//     ], 4);\n    \n//     // Create guardians list WITHOUT our guardian\n//     let guardians_commitment = [11111, 22222, 33333, 44444, 55555, 66666, 77777, 88888, 99999, 101010];\n    \n//     main(\n//         nullifier_hash,\n//         guardians_commitment,\n//         new_owner,\n//         current_owner,\n//         secret_answer_one,\n//         secret_answer_two,\n//         secret_key\n//     );\n// }","path":"/Users/kaleab/Documents/daemon/circuits/src/main.nr"},"68":{"source":"use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"/Users/kaleab/nargo/github.com/noir-lang/poseidon/v0.1.1/src/poseidon2.nr"}},"names":["main"],"brillig_names":[]}